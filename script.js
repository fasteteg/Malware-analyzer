document.addEventListener('DOMContentLoaded', () => {
    const API_KEY = atob('ZjI3MzMwYTktMDIyYy00MmY5LWIzZjAtZDYxYWFmMzU3Mjk2'); // API key codificada en base64
    const API_BASE_URL = 'https://api.cloudmersive.com/virus/scan';

    const fileTab = document.getElementById('fileTab');
    const urlTab = document.getElementById('urlTab');
    const fileInput = document.getElementById('fileInput');
    const urlInput = document.getElementById('urlInput');
    const scanButton = document.getElementById('scanButton');
    const resultDiv = document.getElementById('result');

    fileTab.addEventListener('change', () => {
        fileInput.classList.remove('d-none');
        urlInput.classList.add('d-none');
    });

    urlTab.addEventListener('change', () => {
        urlInput.classList.remove('d-none');
        fileInput.classList.add('d-none');
    });

    scanButton.addEventListener('click', handleScan);

    async function handleScan() {
        const isFileTab = fileTab.checked;
        const file = document.getElementById('file').files[0];
        const url = document.getElementById('url').value.trim();

        if ((isFileTab && !file) || (!isFileTab && !url)) {
            showResult('Please select a file or enter a URL to scan.', 'warning');
            return;
        }

        scanButton.disabled = true;
        scanButton.textContent = 'Scanning...';

        try {
            let scanResult;
            if (isFileTab) {
                scanResult = await scanFile(file);
            } else {
                scanResult = await scanUrl(url);
            }

            const message = scanResult.cleanResult
                ? (isFileTab ? 'File is clean.' : 'URL is safe.')
                : `Potential threat detected! ${scanResult.foundViruses ? 'Viruses found: ' + scanResult.foundViruses.join(', ') : ''}`;
            const type = scanResult.cleanResult ? 'success' : 'danger';

            showResult(message, type);
        } catch (error) {
            showResult(`Error during scan: ${error.message || 'Unknown error'}`, 'danger');
        } finally {
            scanButton.disabled = false;
            scanButton.textContent = 'Scan';
        }
    }

    function showResult(message, type) {
        resultDiv.textContent = message;
        resultDiv.className = `alert alert-${type}`;
        resultDiv.classList.remove('d-none');
    }

    async function scanFile(file) {
        const formData = new FormData();
        formData.append('inputFile', file);

        try {
            const response = await fetch(`${API_BASE_URL}/file`, {
                method: 'POST',
                body: formData,
                headers: {
                    'Apikey': API_KEY
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return {
                cleanResult: data.CleanResult,
                foundViruses: data.FoundViruses
            };
        } catch (error) {
            console.error('Error scanning file:', error);
            throw new Error('Failed to scan file');
        }
    }

    async function scanUrl(url) {
        try {
            const response = await fetch(`${API_BASE_URL}/website`, {
                method: 'POST',
                body: JSON.stringify({ Url: url }),
                headers: {
                    'Content-Type': 'application/json',
                    'Apikey': API_KEY
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return {
                cleanResult: data.CleanResult,
                foundViruses: data.FoundViruses
            };
        } catch (error) {
            console.error('Error scanning URL:', error);
            throw new Error('Failed to scan URL');
        }
    }
});